.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.31)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Daemon 3"
.TH Daemon 3 "2015-12-31" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Proc::Daemon \- Run Perl program as a daemon process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Proc::Daemon;
\&    Proc::Daemon::Init;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains the routine \fBInit\fR which can be called by
a Perl program to initialize itself as a daemon.  A daemon is a
process that runs in the background with no controlling terminal.
Generally servers (like \s-1FTP\s0 and \s-1HTTP\s0 servers) run as daemon processes.
Note, do not make the mistake that a daemon == server.
.PP
The \fBProc::Daemon::Init\fR function does the following:
.IP "1." 4
Forks a child and exits the parent process.
.IP "2." 4
Becomes a session leader (which detaches the program from
the controlling terminal).
.IP "3." 4
Forks another child process and exits first child.  This prevents
the potential of acquiring a controlling terminal.
.IP "4." 4
Changes the current working directory to \*(L"/\*(R".
.IP "5." 4
Clears the file creation mask.
.IP "6." 4
Closes all open file descriptors.
.PP
You will notice that no logging facility, or other functionality
is performed.  \fBProc::Daemon::Init\fR just performs the main steps
to initialize a program as daemon.  Since other funtionality can vary
depending on the nature of the program, \fBProc::Daemon\fR leaves
the implementation of other desired functionality to the
caller, or other module/library (like \fBSys::Syslog\fR).
.PP
There is no meaningful return value \fBProc::Daemon::Init\fR.  If an
error occurs in \fBInit\fR so it cannot perform the above steps, than
it croaks with an error message.  One can prevent program termination
by using eval.
.SH "OTHER FUNCTIONS"
.IX Header "OTHER FUNCTIONS"
\&\fBProc::Daemon\fR also defines some other functions.  These functions
can be imported into the callers name space if the function names
are specified during the \fBuse\fR declaration:
.SS "Fork"
.IX Subsection "Fork"
\&\fBFork\fR is like the built-in \fBfork\fR, but will try to fork if at all
possible, retrying if necessary.  If not possible, \fBFork\fR will
croak.
.SS "OpenMax"
.IX Subsection "OpenMax"
\&\fBOpenMax\fR returns the maximum file descriptor number.
If undetermined, 64 will be returned.
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
\&\fBProc::Daemon::init\fR is still available for backwards capatibilty.
However, it will not perform the double fork, and will return the
session \s-1ID.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Earl Hood, earl@earlhood.com
.PP
http://www.earlhood.com/
.SH "CREDITS"
.IX Header "CREDITS"
Implementation of \fBProc::Daemon\fR derived from the following sources:
.IP "\(bu" 4
\&\fBAdvanced Programming in the \s-1UNIX\s0 Environment\fR, by W. Richard Stevens.
Addison-Wesley, Copyright 1992.
.IP "\(bu" 4
\&\fB\s-1UNIX\s0 Network Progamming\fR, Vol 1, by W. Richard Stevens.
Prentice-Hall \s-1PTR,\s0 Copyright 1998.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\fBCarp\fR, \fB\s-1POSIX\s0\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1POSIX\s0,
Sys::Syslog
